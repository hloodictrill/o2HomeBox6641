#
# This makefile is included by most of the lower level makefiles
# to suck in the common defines.
#

#
# version.make has the 4.0.0 version number,
# each directory must set depth appropriately
#
include $(BUILD_DIR)/version.make

BRCM_RELEASETAG=$(BRCM_VERSION).$(BRCM_RELEASE)L.$(BRCM_EXTRAVERSION)


###########################################
# Define Basic Variables
#
###########################################

BL_BUILD_DIR=$(BUILD_DIR)/cfe/build/broadcom/bcm63xx_rom
KERNEL_VER = 2.6
ifeq ($(strip $(KERNEL_VER)),2.6)
INC_KERNEL_BASE = $(BUILD_DIR)/kernel
ORIGINAL_KERNEL = linuxmips.tar.bz2
endif
KERNEL_DIR = $(INC_KERNEL_BASE)/linux
BRCMDRIVERS_DIR = $(BUILD_DIR)/bcmdrivers
ORIGINAL_MDK = mdk212.tar.bz2

LINUXDIR = $(INC_KERNEL_BASE)/linux
HOSTTOOLS_DIR = $(BUILD_DIR)/hostTools
IMAGES_DIR = $(BUILD_DIR)/images
RELEASE_DIR = $(BUILD_DIR)/release
TARGETS_DIR = $(BUILD_DIR)/targets
DEFAULTCFG_DIR = $(TARGETS_DIR)/defaultcfg
FSSRC_DIR = $(TARGETS_DIR)/fs.src
CFE_FILE = $(TARGETS_DIR)/cfe/cfe$(BRCM_CHIP).bin
#start __MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
#CFE_ROM_FILE = $(TARGETS_DIR)/cfe/cfe$(BRCM_CHIP)rom.bin
# Autumn
CFE_ROM_FILE = $(TARGETS_DIR)/cfe/cfe$(BRCM_CHIP)rom_Release.bin
CFE_NAND128_FILE = $(TARGETS_DIR)/cfe/cfe$(BRCM_CHIP)nand128.bin
CFE_NAND128_FILE_TE = $(TARGETS_DIR)/cfe/cfe$(BRCM_CHIP)nand128_TE.bin
#end __MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
SHARED_DIR = $(BUILD_DIR)/shared
CONFIG_SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \
          else if [ -x /bin/bash ]; then echo /bin/bash; \
          else echo sh; fi ; fi)
GENDEFCONFIG_CMD = $(HOSTTOOLS_DIR)/scripts/gendefconfig

6510_REF_CODE=$(BUILD_DIR)/userapps/broadcom/6510refCode
USERSPACE_PUBLIC_LIBS_DIR=$(BUILD_DIR)/userspace/public/libs

KERNEL_DEBUG=0
KERNEL_KALLSYMS=0


#
# This is for CMS
# We could put this in the make menuconfig, but it might
# confuse the users.  For now, we only support one target OS.
# Everytime we see OALDIR, substitute it with linux
#
TARGET_OS = LINUX
OALDIR = $(subst LINUX,linux,$(strip $(TARGET_OS)))


export BL_BUILD_DIR KERNEL_VER KERNEL_DIR BRCMDRIVERS_DIR \
       LINUXDIR HOSTTOOLS_DIR IMAGES_DIR TARGETS_DIR DEFAULTCFG_DIR \
       FSSRC_DIR CFE_FILE SHARED_DIR GENDEFCONFIG_CMD \
       6510_REF_CODE CMS_LOG_FLAGS OALDIR USERSPACE_PUBLIC_LIBS_DIR \
       KERNEL_DEBUG



###########################################
#
# Import Build Profiles
#
###########################################
BRCM_BOARD=bcm963xx

#
# If we don't define a PROFILE, try to figure out what the last profile
# was and use that.
#
ifneq ($(MAKECMDGOALS), menuconfig)

LAST_PROFILE_COOKIE := $(BUILD_DIR)/.last_profile
LAST_PROFILE        := $(strip $(shell cat $(LAST_PROFILE_COOKIE) 2>/dev/null))
ifeq ($(strip $(PROFILE)),)
PROFILE=$(LAST_PROFILE)
export PROFILE
endif

ifneq ($(strip $(PROFILE)),)
include $(TARGETS_DIR)/$(PROFILE)/$(PROFILE)
export BRCM_CHIP
export BRCM_FLASHPSI_SIZE
export BRCM_DRIVER_WIRELESS_PCMCIA_DATASWAP BRCM_DRIVER_WIRELESS_EBI_DMA
export BRCM_DRIVER_USB BRCM_DRIVER_ETHERNET_CONFIG BRCM_DRIVER_GPON BRCM_DRIVER_XTM
export BRCM_DRIVER_LOG BRCM_GPON_FPGA BRCM_DRIVER_I2C
export BRCM_DRIVER_PKTFLOW_DEBUG BRCM_DRIVER_PKTFLOW_IPV6 BRCM_DRIVER_PKTFLOW_MCAST
export BRCM_DRIVER_MoCA_CTP_CANDIDATE
export BRCM_DRIVER_ISDN
export BRCM_DEFAULTCFG
export BRCM_CERT_FILE
export BRCM_KERNEL_NF_FIREWALL BRCM_KERNEL_NF_MANGLE BRCM_KERNEL_NF_NAT
export BRCM_KERNEL_NF_NAT_ALG_FTP BRCM_KERNEL_NF_NAT_ALG_SIP BRCM_KERNEL_NF_NAT_ALG_TFTP BRCM_KERNEL_NF_NAT_ALG_H323 BRCM_KERNEL_NF_NAT_ALG_H323_SIGNAL_PROXY
export BRCM_KERNEL_NF_NAT_ALG_IRC BRCM_KERNEL_NF_NAT_ALG_WM BRCM_KERNEL_NF_NAT_ALG_PT BRCM_KERNEL_NF_NAT_ALG_PPTP BRCM_KERNEL_NF_NAT_ALG_IPSEC
export BRCM_KERNEL_NF_NAT_ALG_RTSP BRCM_KERNEL_NF_NAT_ALG_SNMP BRCM_KERNEL_NF_NAT_ALG_TALK
export BRCM_EXT_SWITCH BRCM_EXT_SWITCH_REV
export BCM_PHY_54616
#__MTS__, TengChang
export ZYXEL_FLASH_FS_SIZE BRCM_KERNEL_AUXFS_JFFS2 ZYXEL_LOGRAM_SIZE ZYXEL_LOG_ROTATE_NUM ZYXEL_SYSLOG_CATEGORY ZYXEL_SYS_AND_SEC_LOG ZYXEL_HIDE_BRCM_LOG
#__MTS__, Dennis
export BUILD_MTS_WPUT
export BUILD_MTS_WGET
# Image Default, __CHT__, MitraStar Curtis, 20111124.
export ZYXEL_OBM_IMAGE_DEFAULT
export BUILD_MSTC_FW_WITH_DIFFERENT_HW
# JhihShan 
export SMT_DEFAULTCFG
endif
endif

# Yi-Jun@MSTC, For voice board ID profiling support. #
ifneq ($(strip $(BRCM_VOICE_BOARD_ID)),)
export BRCM_VOICE_BOARD_ID
endif

#mwang: export everything we get from the profile file here.
#export all the BUILD_xxx here?
export DESKTOP_LINUX BRCM_BOARD BRCM_UCLIBC 
export BUILD_HTTPD_SSL
export BUILD_WGET_HTTPS

###########################################
#
# Define Toolchain
#
###########################################
ifeq ($(strip $(BRCM_UCLIBC)),y)
NTC=1
ifeq ($(strip $(NTC)),1)
ifndef TOOLCHAIN

ifndef TOOLCHAIN_TOP
TOOLCHAIN_TOP = /opt/toolchains/uclibc-crosstools-gcc-4.4.2-1
endif
TOOLCHAIN = $(TOOLCHAIN_TOP)/usr
LIBDIR = $(TOOLCHAIN_TOP)/lib
USRLIBDIR = $(TOOLCHAIN_TOP)/usr/lib
EXTRALIBDIR = $(TOOLCHAIN_TOP)/usr/mips-linux-uclibc/lib
EXTRAINCDIR = $(TOOLCHAIN_TOP)/usr/lib/gcc/mips-linux-uclibc/4.4.2/include
LIB_PATH        = $(TOOLCHAIN_TOP)/lib
LIBCDIR         = $(TOOLCHAIN_TOP)/lib
ifndef NO_WERRS
export BRCM_WERROR_CFLAGS :=  -Werror=return-type -Werror=uninitialized -Werror=frame-larger-than=1024
else
export BRCM_WERROR_CFLAGS :=
endif

BRCM_COMMON_CFLAGS :=  -Os -march=mips32  -fomit-frame-pointer -fno-strict-aliasing -mabi=32 -G 0 -msoft-float -pipe -Wa,-mips32 $(BRCM_WERROR_CFLAGS)

export BRCM_APP_CFLAGS :=  $(BRCM_COMMON_CFLAGS) -mno-shared
export BRCM_SO_CFLAGS :=   $(BRCM_COMMON_CFLAGS)

endif
CROSS_COMPILE = $(TOOLCHAIN)/bin/mips-linux-uclibc-
else
TOOLCHAIN=/opt/toolchains/uclibc
CROSS_COMPILE = $(TOOLCHAIN)/bin/mips-uclibc-
endif
else
TOOLCHAIN=/usr/crossdev/mips
CROSS_COMPILE = $(TOOLCHAIN)/bin/mips-linux-
endif

ifeq ($(strip $(DESKTOP_LINUX)),y)
CROSS_COMPILE = /usr/bin/
endif


AR              = $(CROSS_COMPILE)ar
AS              = $(CROSS_COMPILE)as
LD              = $(CROSS_COMPILE)ld
CC              = $(CROSS_COMPILE)gcc
CXX             = $(CROSS_COMPILE)g++
CPP             = $(CROSS_COMPILE)cpp
NM              = $(CROSS_COMPILE)nm
STRIP           = $(CROSS_COMPILE)strip
SSTRIP          = $(CROSS_COMPILE)sstrip
OBJCOPY         = $(CROSS_COMPILE)objcopy
OBJDUMP         = $(CROSS_COMPILE)objdump
RANLIB          = $(CROSS_COMPILE)ranlib

# If building on desktop, don't strip binaries
ifeq ($(strip $(DESKTOP_LINUX)),y)
STRIP  = /bin/touch
SSTRIP = /bin/touch
endif

# If building on desktop, set LIBDIR for legacy makefiles
# that still use LIBDIR (e.g. zebra)
ifeq ($(strip $(DESKTOP_LINUX)),y)
LIB_PATH        = /usr/lib
LIBDIR          = /usr/lib
LIBCDIR         = /usr/lib
endif


# STRIP is used to strip the kernel modules.  Currently, there is no
# usage scenario which requires unstripped kernel modules.

# SSTRIP is used to strip userspace apps.  If BUILD_GDBSERVER, then
# SSTRIP is set to /bin/touch, which tells buildFS to not sstrip the
# userspace binaries. 
ifeq ($(strip $(BUILD_GDBSERVER)),y)
SSTRIP = /bin/touch
endif


export TOOLCHAIN_TOP TOOLCHAIN LEGACY_TOOLCHAIN CROSS_COMPILE \
       AR AS LD CC CXX CPP NM STRIP SSTRIP OBJCOPY OBJDUMP RANLIB \
       LIB_PATH LIBDIR USRLIBDIR EXTRALIBDIR EXTRAINCDIR LIBCDIR \
       BUILD_GDBSERVER



###########################################
#
# Application-specific settings
#
###########################################
TARGET_FS = $(TARGETS_DIR)/$(PROFILE)/fs
PROFILE_DIR = $(TARGETS_DIR)/$(PROFILE)
INSTALL_DIR=$(PROFILE_DIR)/fs.install
PROFILE_PATH = $(TARGETS_DIR)/$(PROFILE)/$(PROFILE)
VENDOR_NAME = bcm
FS_KERNEL_IMAGE_NAME = $(VENDOR_NAME)$(PROFILE)_fs_kernel
CFE_FS_KERNEL_IMAGE_NAME = $(VENDOR_NAME)$(PROFILE)_cfe_fs_kernel
FLASH_IMAGE_NAME = $(VENDOR_NAME)$(PROFILE)_flash_image_$(BRCM_BOARD_ID)
SMT_IMAGE_NAME = $(VENDOR_NAME)$(PROFILE)_SMT_$(BRCM_BOARD_ID)
#start __MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
#FLASH_NAND_CFEROM_FS_IMAGE_NAME_16 = $(VENDOR_NAME)$(PROFILE)_nand_cferom_fs_image_16
# Autumn
FLASH_NAND_RAW_FS_IMAGE_NAME_16 = $(VENDOR_NAME)$(PROFILE)_nand_raw_fs_image_16
#end __MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
FLASH_NAND_FS_IMAGE_NAME_16 = $(VENDOR_NAME)$(PROFILE)_nand_fs_image_16
#start __MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
#FLASH_NAND_CFEROM_FS_IMAGE_NAME_128 = $(VENDOR_NAME)$(PROFILE)_nand_cferom_fs_image_128
# Autumn
FLASH_NAND_RAW_FS_IMAGE_NAME_128 = $(VENDOR_NAME)$(PROFILE)_nand_raw_fs_image_128
#end __MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
FLASH_NAND_FS_IMAGE_NAME_128 = $(VENDOR_NAME)$(PROFILE)_nand_fs_image_128
FLASH_NAND_BLOCK_16KB=16384
FLASH_NAND_BLOCK_128KB=131072
INC_BRCMDRIVER_PUB_PATH=$(BRCMDRIVERS_DIR)/opensource/include
INC_BRCMDRIVER_PRIV_PATH=$(BRCMDRIVERS_DIR)/broadcom/include
INC_ADSLDRV_PATH=$(BRCMDRIVERS_DIR)/broadcom/char/adsl/impl1
INC_ATMAPI_DRV_PATH=$(BRCMDRIVERS_DIR)/broadcom/char/atmapi/impl1
INC_MOCACFGDRV_PATH=$(BRCMDRIVERS_DIR)/broadcom/char/moca/impl1


INC_BRCMSHARED_PUB_PATH=$(SHARED_DIR)/opensource/include
INC_BRCMSHARED_PRIV_PATH=$(SHARED_DIR)/broadcom/include
INC_BRCMBOARDPARMS_PATH=$(SHARED_DIR)/opensource/boardparms
INC_FLASH_PATH=$(SHARED_DIR)/opensource/flash
INC_UTILS_PATH=$(SHARED_DIR)/opensource/utils
INC_SPI_PATH=$(SHARED_DIR)/opensource/spi
INC_SPUDRV_PATH=$(BRCMDRIVERS_DIR)/broadcom/char/spudd/impl1
INC_PWRMNGTDRV_PATH=$(BRCMDRIVERS_DIR)/broadcom/char/pwrmngt/impl1
INC_ENETDRV_PATH=$(BRCMDRIVERS_DIR)/broadcom/net/enet/impl4

#start__MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
export TARGET_FS PROFILE_DIR INSTALL_DIR PROFILE_PATH VENDOR_NAME \
       FS_KERNEL_IMAGE_NAME CFE_FS_KERNEL_IMAGE_NAME FLASH_IMAGE_NAME SMT_IMAGE_NAME\
       INC_BRCMDRIVER_PUB_PATH INC_BRCMDRIVER_PRIV_PATH \
       INC_ADSLDRV_PATH INC_ATMAPI_DRV_PATH \
       INC_BRCMSHARED_PUB_PATH INC_BRCMSHARED_PRIV_PATH \
       INC_BRCMBOARDPARMS_PATH INC_FLASH_PATH \
       INC_UTILS_PATH \
       INC_PWRMNGTDRV_PATH INC_ENETDRV_PATH INC_SPI_PATH 
#end __MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 


##################################################################
#
# Start CMS specific defines
#
##################################################################

ifeq ($(strip $(DESKTOP_LINUX)),y)

#Defines when are are building for Desktop Linux

ifdef BRCM_CMS_COMPILER_OPTS
CMS_COMPILER_OPTS := -Wall -W $(BRCM_CMS_COMPILER_OPTS) -DDESKTOP_LINUX	-fPIC
else
# The -O is needed to detect uninitialized variables, but sometimes prevents
# gdb from printing out a variable value.  So if you need to do some serious
# debugging, set BRCM_CMS_COMPILER_OPTS=-g in your shell.
CMS_COMPILER_OPTS := -Wall -W -O -g -DDESKTOP_LINUX -fPIC
endif

# Force 32 bit compiles even if the build machine is a 64 bit system
CMS_COMPILER_OPTS += -m32

CMS_COMMON_LIBS   := -lcms_util -lcms_boardctl -lcrypt -lutil -lrt

CMS_LIB_RPATH = $(ALLOWED_LIB_DIRS):$(INSTALL_DIR)$(subst :,:$(INSTALL_DIR),$(ALLOWED_LIB_DIRS))

else

# Defines when we are building for flash
CMS_COMPILER_OPTS := $(BRCM_COMMON_CFLAGS) -Wall -Dmips -g -fPIC

CMS_COMMON_LIBS   := -lcms_util -lcms_boardctl -lcrypt -lutil

CMS_LIB_RPATH =

endif


# This is the cms_core library plus all the libraries that libcms_core 
# depend on.
CMS_CORE_LIBS := -lcms_core -lnanoxml -ldl -lmdm

ifneq ($(strip $(BRCM_DRIVER_ADSL)),)
CMS_CORE_LIBS +=  -lxdslctl
endif

ifneq ($(strip $(BRCM_DRIVER_XTM)),)
CMS_CORE_LIBS +=  -latmctl
endif

ifneq ($(strip $(BUILD_MoCACTL)),)
CMS_CORE_LIBS +=  -lmocactl -lm
endif

ifneq ($(strip $(BUILD_MoCACTL2)),)
CMS_CORE_LIBS +=  -lpthread
endif

ifneq ($(strip $(BUILD_GPONCTL)),)
CMS_CORE_LIBS +=  -lgponctl -lgponif
endif

ifneq ($(strip $(BUILD_OMCI)),)
CMS_CORE_LIBS +=  -lomci -lomcipm_drv -lm
endif

ifneq ($(strip $(BUILD_VLANCTL)),)
CMS_CORE_LIBS +=  -lvlanctl
endif

ifneq ($(strip $(BUILD_SPUCTL)),)
CMS_CORE_LIBS +=  -lspuctl
endif

ifneq ($(strip $(BUILD_PWRCTL)),)
CMS_CORE_LIBS +=  -lpwrctl
endif

ifneq ($(strip $(BUILD_ETHSWCTL)),)
CMS_CORE_LIBS += -lethswctl
endif

ifneq ($(strip $(BUILD_CMFAPI)),)
CMS_CORE_LIBS += -lcmfapi
endif

ifneq ($(strip $(BUILD_WANVLANMUX)),)
ifeq ($(strip $(BUILD_OMCI)),)
CMS_CORE_LIBS += -lvlanctl
endif
endif

ifneq ($(strip $(BUILD_IGMP_SNOOP)),)
CMS_CORE_LIBS += -lmcasthal
endif

CMS_LIB_PATH = $(patsubst %,-L$(INSTALL_DIR)%,$(subst :, ,$(ALLOWED_LIB_DIRS)))

CMS_COMPILER_OPTS += -DMDM_SHARED_MEM
CMS_COMPILER_OPTS += -DCMS_MEM_DEBUG

export CMS_COMMON_LIBS CMS_CORE_LIBS CMS_COMPILER_OPTS CMS_COMPILE_FLAGS


#
# Several features will trigger the building of libpcap.
export BUILD_LIBPCAP
ifneq ($(strip $(BUILD_TCPDUMP)),)
BUILD_LIBPCAP=y
endif

ifneq ($(strip $(BUILD_SENDPACKETS)),)
BUILD_LIBPCAP=y
endif

ifneq ($(strip $(BUILD_RPCAPD)),)
BUILD_LIBPCAP=y
endif


#
# Many features will trigger the building of OpenSSL.
# OpenSSL is both a library and an app.
# We could distinguish betwen building OpenSSL lib and OpenSSL app,
# but for now, we always build and install both.  I have a plan to
# get rid of the app completely.
#
ifneq ($(strip $(BUILD_CERT)),)
DO_BUILD_OPENSSL=y
endif

ifneq ($(strip $(BUILD_TR69C_SSL)),)
DO_BUILD_OPENSSL=y
endif

ifneq ($(strip $(BUILD_HTTPD_SSL)),)
DO_BUILD_OPENSSL=y
endif

ifneq ($(strip $(BUILD_IPSEC_TOOLS)),)
DO_BUILD_OPENSSL=y
endif

export DO_BUILD_OPENSSL

# [IreneWang@MSTC:TO2]$ Upgrade OpenSSL from 0.9.7f to 0.9.8zd, 20150115
ifneq ($(strip $(BUILD_OPENSSL_98ZD)),)
CMS_DMP_FLAGS += -DOPENSSL_98ZD
export BUILD_OPENSSL_98ZD
endif

#
# These profiles are always defined
#
CMS_DMP_FLAGS := -DDMP_BASELINE_1 -DDMP_X_BROADCOM_COM_BASELINE_1

ifneq ($(strip $(BUILD_MSTC_SUPPORT_RFC6092)),)
CMS_DMP_FLAGS += -DDMP_X_5067F0_SUPPORT_RFC6092_1
endif

ifneq ($(strip $(BUILD_VODSL)),)
CMS_DMP_FLAGS += -DMSTC_SUPPORT_VOICE
endif

#
# these profiles are always defined, but we may also want the
# ability to compile them out in the future
#
CMS_DMP_FLAGS += -DDMP_ETHERNETLAN_1
CMS_DMP_FLAGS += -DDMP_DEVICEASSOCIATION_1
CMS_DMP_FLAGS += -DDMP_DOWNLOAD_1
CMS_DMP_FLAGS += -DDMP_UPLOAD_1
CMS_DMP_FLAGS += -DDMP_UDPECHO_1
CMS_DMP_FLAGS += -DDMP_QOS_1
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_QOS_1
#we don't support QOSDYNAMICFLOW right now
CMS_DMP_FLAGS += -DDMP_QOSDYNAMICFLOW_1

CMS_DMP_FLAGS += -DDMP_IPPING_1
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_DEBUG_1
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_SECURITY_1


#
# ADSLWAN_1 profile is used to mean presence of xDSL technology on 
# the modem, the presence of ATM technology, and presence of ADSL.
# BUILD_DSL is a pre-requisit for loop diag, atm loopback, bonding,
# vdsl phy, and multi-mode phy.  ATM WAN and PTM WAN have their own
# controls in make menuconfig, so users should be smart enough to
# unselect that if DSL driver is not built.
#
ifneq ($(strip $(BUILD_DSL)),)

CMS_DMP_FLAGS += -DDMP_ADSLWAN_1 -DDMP_X_BROADCOM_COM_ADSLWAN_1 
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_XTMSTATS_1

ifneq ($(strip $(BUILD_DSL_LOOP_DIAG)),)
CMS_DMP_FLAGS += -DDMP_DSLDIAGNOSTICS_1
endif

ifeq ($(strip $(BRCM_PHY_BONDING)),y)
CMS_DMP_FLAGS += -DSUPPORT_DSL_BONDING -DDMP_X_BROADCOM_COM_DSLBONDING_1
export BRCM_PHY_BONDING=y
endif

ifeq ($(strip $(BRCM_PHY_LOOPBACK)),y)
CMS_DMP_FLAGS += -DSUPPORT_DSL_LOOPBACK
export BRCM_PHY_LOOPBACK=y
endif

ifeq ($(strip $(BRCM_MULTI_PHY)),y)
CMS_DMP_FLAGS += -DSUPPORT_MULTI_PHY
export BRCM_MULTI_PHY=y
endif

ifeq ($(strip $(BRCM_PHY_BONDING5B)),y)
CMS_DMP_FLAGS += -DSUPPORT_DSL_BONDING5B
export BRCM_PHY_BONDING5B=y
endif

ifeq ($(strip $(BRCM_PHY_BONDING_C0)),y)
CMS_DMP_FLAGS += -DSUPPORT_DSL_BONDING -DDMP_X_BROADCOM_COM_DSLBONDING_1
export BRCM_PHY_BONDING_C0=y
endif

DSL_GINP_RTX_DRIVER_DEFINES := -DNONE

ifeq ($(strip $(BRCM_PHY_GINP_RTX)),y)
ifeq ($(strip $(BRCM_CHIP)),63268)
CMS_DMP_FLAGS += -DSUPPORT_DSL_GINP_RTX
DSL_GINP_RTX_DRIVER_DEFINES += -DSUPPORT_DSL_GINP_RTX
export BRCM_PHY_GINP_RTX=y
endif
endif
export DSL_GINP_RTX_DRIVER_DEFINES

DSL_EXT_BONDING_DRIVER_DEFINES := -DNONE

ifeq ($(strip $(BRCM_EXT_PHY_BONDING)),y)
ifeq ($(strip $(BRCM_CHIP)),63268)
CMS_DMP_FLAGS += -DSUPPORT_EXT_DSL_BONDING -DDMP_X_BROADCOM_COM_DSLBONDING_1 -DSUPPORT_DSL_BONDING
endif
ifeq ($(strip $(BRCM_CHIP)),6368)
CMS_DMP_FLAGS += -DSUPPORT_EXT_DSL_BONDING
endif
DSL_EXT_BONDING_DRIVER_DEFINES += -DSUPPORT_EXT_DSL_BONDING
export BRCM_EXT_PHY_BONDING=y
endif

export DSL_EXT_BONDING_DRIVER_DEFINES


# VDSL flags have to be turned on for VDSL and Multimode phy
ifneq ($(strip $(BUILD_PHY_VDSL)),)
CMS_DMP_FLAGS += -DDMP_VDSL2WAN_1 -DDMP_X_BROADCOM_COM_VDSL2WAN_1
endif

ifneq ($(strip $(BUILD_PHY_MULTIMODE)),)
CMS_DMP_FLAGS += -DDMP_VDSL2WAN_1 -DDMP_X_BROADCOM_COM_VDSL2WAN_1
endif

export BUILD_PHY_ADSL BUILD_PHY_VDSL BUILD_PHY_MULTIMODE
endif


# 
# Various technologies as WAN interface selections
#

# this means the user wants to have a ATM WAN interface
# ATMLOOPBACK is automatically selected in config.in when ATM WAN is selected
ifneq ($(strip $(BUILD_ATMWAN)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_ATMWAN_1
endif

ifneq ($(strip $(BUILD_ATMLOOPBACK)),)
CMS_DMP_FLAGS += -DDMP_ATMLOOPBACK_1 -DDMP_X_BROADCOM_COM_ATMLOOPBACK_1 
endif

# this means the modem has PTM technology and user wants to have
# a PTM WAN interface
ifneq ($(strip $(BUILD_PTMWAN)),)
CMS_DMP_FLAGS += -DDMP_PTMWAN_1 -DDMP_X_BROADCOM_COM_PTMWAN_1
endif

# this means the user wants to have a Moca WAN interface
ifneq ($(strip $(BUILD_MOCAWAN)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_MOCAWAN_1
endif

# this means user wants to have a ethernet WAN interface
ifneq ($(strip $(BUILD_ETHWAN)),)
CMS_DMP_FLAGS += -DSUPPORT_ETHWAN -DDMP_ETHERNETWAN_1
endif

# this means user wants to have a WWAN interface
ifneq ($(strip $(BUILD_WWAN)),)
CMS_DMP_FLAGS += -DMTS_TELEFONICA_WWAN -DDMP_X_ZYXEL_COM_WWAN_1
CMS_COMPILE_FLAGS += -DENABLE_LKUD_NOTIFY=$(ENABLE_LKUD_NOTIFY)
export MTS_TELEFONICA_WWAN=y
endif

# /* MSTC, USB PORT SWAP by Andylin 20120509*/
ifneq ($(strip $(BUILD_USB_PORT_SWAP)),)
CMS_DMP_FLAGS += -DUSB_PORT_SWAP
export USB_PORT_SWAP=y
endif

# this means the user wants to have a EPON WAN interface
ifneq ($(strip $(BUILD_EPONWAN)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_PONWAN_1 -DDMP_X_BROADCOM_COM_EPONWAN_1
endif

# this means the user wants to have a GponRG Light Omci build
ifneq ($(strip $(BUILD_GPONRG_OMCI_LIGHT)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_PONWAN_1 -DDMP_X_BROADCOM_COM_GPONWAN_1 -DDMP_X_BROADCOM_COM_GPONRG_OMCI_LIGHT_1 
endif

# this means the user wants to have a  GponRG Full Omci build
ifneq ($(strip $(BUILD_GPONRG_OMCI_FULL)),)
CMS_DMP_FLAGS +=  -DDMP_X_BROADCOM_COM_PONWAN_1 -DDMP_X_BROADCOM_COM_GPONWAN_1 -DDMP_X_BROADCOM_COM_GPONRG_OMCI_FULL_1
endif

# this means the user wants to have a GPON OMCI TR69 dual stack
ifneq ($(strip $(BUILD_OMCI_TR69_DUAL_STACK)),)
CMS_DMP_FLAGS += -DOMCI_TR69_DUAL_STACK
endif

ifneq ($(strip $(BUILD_OMCI)),)
ifeq ($(strip $(BUILD_GPONRG_OMCI_LIGHT)),)
ifeq ($(strip $(BUILD_GPONRG_OMCI_FULL)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_GPONONT_1
endif
endif
endif

# this means user wants to have a L2TP AC (PPPoL2TPAC) WAN service
ifneq ($(strip $(BUILD_L2TPAC)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_L2TPAC_1
endif

ifneq ($(strip $(BUILD_MoCACTL)),)
CMS_DMP_FLAGS += -DSUPPORT_MOCA -DDMP_X_BROADCOM_COM_MOCALAN_1
endif

ifneq ($(strip $(BRCM_MOCA_SOFT_SWITCHING)),)
CMS_DMP_FLAGS += -DMOCA_SOFT_SWITCHING
endif

ifneq ($(strip $(BUILD_MoCACTL2)),)
CMS_DMP_FLAGS += -DBRCM_MOCA_DAEMON
endif

# eanble DMP_X_BROADCOM_COM_BPAAPI_1 under the following conditions
# Both ETHWAN and MOCAWAN are enabled, or
# some other condition TBD by Anil

ifneq ($(strip $(BUILD_ETHWAN)),)
ifneq ($(strip $(BUILD_MOCAWAN)),)
BUILD_BPAAPI := 1
endif
endif

ifneq ($(strip $(BUILD_BPAAPI)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_BPAAPI_1
endif

ifneq ($(strip $(BUILD_SOAP)),)
CMS_DMP_FLAGS += -DSUPPORT_SOAP
endif

ifneq ($(strip $(BUILD_IPSEC_TOOLS)),)
CMS_DMP_FLAGS += -DSUPPORT_IPSEC -DDMP_X_BROADCOM_COM_IPSEC_1
endif
ifneq ($(strip $(BUILD_SNMP)),)
CMS_DMP_FLAGS += -DSUPPORT_SNMP -DDMP_X_BROADCOM_COM_SNMP_1
endif

ifneq ($(strip $(BUILD_TR64)),)
CMS_DMP_FLAGS += -DSUPPORT_TR64C -DDMP_X_BROADCOM_COM_TR64_1
endif

# __MitraStar__, __Telefonica__, ShuFang, multi-languages --start
ifneq ($(strip $(BUILD_MULTI_LANGUAGES)),)
	export BUILD_MULTI_LANGUAGES
	CMS_DMP_FLAGS += -DBUILD_MULTI_LANGUAGES
	ifneq ($(strip $(BUILD_MULTI_LANGUAGES_ENG)),)
		export	BUILD_MULTI_LANGUAGES_ENG
	endif
	ifneq ($(strip $(BUILD_MULTI_LANGUAGES_SPA)),)
		export	BUILD_MULTI_LANGUAGES_SPA
	endif
endif
# __MitraStar__, __Telefonica__, ShuFang, multi-languages --end

ifneq ($(strip $(BUILD_IPV6)),)
CMS_DMP_FLAGS += -DSUPPORT_IPV6	-DDMP_X_BROADCOM_COM_IPV6_1 -DMTS_TELEFONICA_IPV6
endif

ifneq ($(strip $(BUILD_TR69C)),)
CMS_DMP_FLAGS += -DSUPPORT_TR69C
endif

ifneq ($(strip $(BUILD_TR69C_SSL)),)
CMS_DMP_FLAGS += -DSUPPORT_TR69C
endif

ifneq ($(strip $(BUILD_TR69C_BCM_SSL)),)
CMS_DMP_FLAGS += -DSUPPORT_TR69C
endif

ifneq ($(strip $(BUILD_EPON_SDK_VOICE_OAM)),)
CMS_DMP_FLAGS +=   -DDMP_X_CT_ORG_EPON_1 -DDMP_ENDPOINT_1 -DDMP_EPON_VOICE_OAM -DDMP_X_BROADCOM_COM_EPON_1
endif

ifneq ($(strip $(BUILD_GPON)),)

CMS_DMP_FLAGS += -DDMP_X_ITU_ORG_GPON_1 -DDMP_X_BROADCOM_COM_GPON_1 -DDMP_DEVICE_2

ifeq ($(strip $(BRCM_APP_PHONE)),sip)
CMS_DMP_FLAGS += -DDMP_X_ITU_ORG_VOICE_1 -DDMP_X_ITU_ORG_VOICE_SIP_1
endif

ifeq ($(strip $(BRCM_APP_PHONE)),mgcp)
#CMS_DMP_FLAGS += -DDMP_X_ITU_ORG_VOICE_1 -DDMP_X_ITU_ORG_VOICE_MGC_1
endif

endif

ifneq ($(strip $(BUILD_OMCI)),)
CMS_DMP_FLAGS += -DBRCM_OMCI
endif

ifneq ($(strip $(BUILD_HTTPD)),)
CMS_DMP_FLAGS += -DSUPPORT_HTTPD
endif

ifneq ($(strip $(BUILD_QUICKSETUP)),)
CMS_DMP_FLAGS += -DSUPPORT_QUICKSETUP -DDMP_X_BROADCOM_COM_QUICKSETUP_1
endif

ifneq ($(strip $(BUILD_HTTPD_SSL)),)
CMS_DMP_FLAGS += -DSUPPORT_HTTPD -DSUPPORT_HTTPD_SSL
endif

ifneq ($(strip $(BUILD_CLI_MENU)),)
CMS_DMP_FLAGS += -DSUPPORT_CLI_MENU
endif

ifneq ($(strip $(BUILD_CLI_CMD)),)
CMS_DMP_FLAGS += -DSUPPORT_CLI_CMD -DCLI_CMD_EDIT
endif

ifneq ($(strip $(BUILD_CONSOLED)),)
CMS_DMP_FLAGS += -DSUPPORT_CONSOLED
endif


ifneq ($(strip $(BUILD_VECTORINGD)),)
CMS_DMP_FLAGS += -DSUPPORT_VECTORINGD
export BUILD_VECTORINGD=y
endif


ifneq ($(strip $(BUILD_TELNETD)),)
CMS_DMP_FLAGS += -DSUPPORT_TELNETD
endif

ifneq ($(strip $(BUILD_SSHD)),)
CMS_DMP_FLAGS += -DSUPPORT_SSHD
endif

ifneq ($(strip $(BUILD_FTPD)),)
CMS_DMP_FLAGS += -DSUPPORT_FTPD
endif

ifneq ($(strip $(BUILD_EBTABLES)),)
CMS_DMP_FLAGS += -DSUPPORT_EBTABLES
endif

ifneq ($(strip $(BUILD_TOD)),)
CMS_DMP_FLAGS += -DSUPPORT_TOD -DDMP_X_BROADCOM_COM_ACCESSTIMERESTRICTION_1
endif

ifneq ($(strip $(BUILD_URLFILTER)),)
CMS_DMP_FLAGS += -DSUPPORT_URLFILTER
endif

ifneq ($(strip $(BUILD_IPROUTE2)),)
CMS_DMP_FLAGS += -DSUPPORT_POLICYROUTING
endif

ifneq ($(strip $(BUILD_UPNP)),)
CMS_DMP_FLAGS += -DSUPPORT_UPNP -DDMP_X_BROADCOM_COM_UPNP_1
endif

ifneq ($(strip $(BUILD_HASHED_PASSWORDS)),)
CMS_DMP_FLAGS += -DSUPPORT_HASHED_PASSWORDS
endif

ifneq ($(strip $(BUILD_DDNSD)),)
CMS_DMP_FLAGS += -DSUPPORT_DDNSD -DDMP_X_BROADCOM_COM_DYNAMICDNS_1
endif

ifneq ($(strip $(BUILD_DPROXY)),)
CMS_DMP_FLAGS += -DSUPPORT_DNSPROXY -DDMP_X_BROADCOM_COM_DNSPROXY_1
endif

ifneq ($(strip $(BUILD_DNSMASQ)),)
CMS_DMP_FLAGS += -DSUPPORT_DNSMASQ -DDMP_X_0023F8_DNSMASQ_1
endif
ifneq ($(strip $(BUILD_DNSPROBE)),)
CMS_DMP_FLAGS += -DSUPPORT_DNSPROBE
endif

ifneq ($(strip $(BUILD_DPROXYWITHPROBE)),)
CMS_DMP_FLAGS += -DSUPPORT_DNSPROXYWITHPROBE -DDMP_X_BROADCOM_COM_DNSPROXY_1
endif

ifneq ($(strip $(BUILD_SUPERDMZ)),)
CMS_DMP_FLAGS += -DSUPPORT_ADVANCED_DMZ
endif

ifneq ($(strip $(BUILD_IPPD)),)
CMS_DMP_FLAGS += -DSUPPORT_IPP -DDMP_X_BROADCOM_COM_IPPRINTING_1
endif

ifneq ($(strip $(BUILD_DLNA)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_DLNA_1
export BUILD_DLNA
endif

ifneq ($(strip $(BUILD_DSLDIAGD)),)
CMS_DMP_FLAGS += -DSUPPORT_DSLDIAGD
endif

ifneq ($(strip $(BUILD_SNTP)),)
CMS_DMP_FLAGS += -DSUPPORT_SNTP -DDMP_TIME_1
endif

ifneq ($(strip $(BUILD_UDHCP)),)
CMS_DMP_FLAGS += -DSUPPORT_UDHCP
endif

ifneq ($(strip $(BUILD_UDHCP_RELAY)),)
CMS_DMP_FLAGS += -DDHCP_RELAY
endif

ifneq ($(strip $(BRCM_DRIVER_P8021AG)),)
CMS_DMP_FLAGS += -DSUPPORT_P8021AG -DDMP_X_BROADCOM_COM_P8021AG_1
endif

ifneq ($(strip $(BUILD_SPUCTL)),)
CMS_DMP_FLAGS += -DSUPPORT_SPUCTL 
endif

ifneq ($(strip $(BUILD_PWRCTL)),)
CMS_DMP_FLAGS += -DSUPPORT_PWRMNGT -DDMP_X_BROADCOM_COM_PWRMNGT_1
endif

ifneq ($(strip $(BRCM_HOSTMIPS_PWRSAVE)),)
CMS_DMP_FLAGS += -DSUPPORT_HOSTMIPS_PWRSAVE
endif

ifneq ($(strip $(BRCM_DDR_SELF_REFRESH_PWRSAVE)),)
CMS_DMP_FLAGS += -DSUPPORT_DDR_SELF_REFRESH_PWRSAVE
endif

ifneq ($(strip $(BRCM_ETH_PWRSAVE)),)
CMS_DMP_FLAGS += -DSUPPORT_ETH_PWRSAVE
endif

ifneq ($(strip $(BRCM_AVS_PWRSAVE)),)
CMS_DMP_FLAGS += -DSUPPORT_AVS_PWRSAVE
endif

ifneq ($(strip $(BUILD_BMU)),)
CMS_DMP_FLAGS += -DSUPPORT_BMU
endif

ifneq ($(strip $(BRCM_STANDBY)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_STANDBY_1
endif

#Support LAN Devices HPNA data model. __TELEFONICA__, MitraStar, Delon Yu, 20111122.
ifneq ($(strip $(BUILD_HPNA)),)
CMS_DMP_FLAGS += -DDMP_X_0023F8_HPNA_1 -DBUILD_HPNA
export BUILD_HPNA=y
endif

#Support HPNA in BCM53124S, KeyYang@MSTC 20120914
ifneq ($(strip $(BUILD_MSTC_EXTERNAL_HPNA)),)
CMS_COMPILE_FLAGS += -DMSTC_EXTERNAL_HPNA
CUSTOM_CFLAGS += -DMSTC_EXTERNAL_HPNA
CMS_DMP_FLAGS += -DMSTC_EXTERNAL_HPNA
export BUILD_MSTC_EXTERNAL_HPNA=y
endif

ifneq ($(strip $(BUILD_5G)),)
CMS_DMP_FLAGS += -DBUILD_5G
export BUILD_5G=y
endif

ifneq ($(strip $(BUILD_CMFD)),)
CMS_DMP_FLAGS += -DSUPPORT_CMFD
endif

ifneq ($(strip $(BUILD_GPONCTL)),)
CMS_DMP_FLAGS += -DSUPPORT_GPONCTL
endif

ifneq ($(strip $(BUILD_RNGD)),)
CMS_DMP_FLAGS += -DSUPPORT_HWRANDOM
endif

ifneq ($(strip $(BUILD_EPON_SDK)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_EPON_1
endif

ifneq ($(strip $(BUILD_MOD_SW_UPDATE)),)
CMS_DMP_FLAGS += -DSUPPORT_MOD_SW_UPDATE
endif

# Build 406 Voice start
ifneq ($(strip $(BUILD_MSTC_VOICE_406)),)
CMS_DMP_FLAGS += -DSUPPORT_NEW_OUI -DSUPPORT_406_VOICE
export BUILD_ZYXEL_406_VOICE=y
endif
# Build 406 Voice end
ifneq ($(strip $(BUILD_MSTC_VOICE_412)),)
CMS_DMP_FLAGS += -DSUPPORT_412_VOICE
endif

ifneq ($(strip $(BUILD_MSTC_VOICE_412_L06)),)
CMS_DMP_FLAGS += -DSUPPORT_412_VOICE_L06
endif

# Build ZyXEL IVR start
ifneq ($(strip $(BUILD_MSTC_VOICE_IVR)),)
CMS_DMP_FLAGS += -DZYXEL_IVR_PORTING
export BUILD_MSTC_IVR=y
endif

ifneq ($(strip $(BUILD_MSTC_VOICE_SRTP)),)
CMS_DMP_FLAGS += -DMSTC_VOICE_SUPPORT_SRTP
export BUILD_MSTC_VOICE_SRTP=y
endif


ifneq ($(strip $(BUILD_MSTC_VOICE_KSOCKET_RTP)),)
CMS_DMP_FLAGS += -DMSTC_VOICE_KSOCKET_RTP
export BUILD_MSTC_VOICE_KSOCKET_RTP=y
endif

ifneq ($(strip $(BUILD_MSTC_VOICE_KSOCKET_PASS_RTCP)),)
export BUILD_MSTC_VOICE_KSOCKET_PASS_RTCP=y
endif

ifneq ($(strip $(BUILD_MSTC_VOICE_OPTION_SIPSERVER)),)
CMS_DMP_FLAGS += -DBUILD_VOICE_OPTION_SIPSERVER
export BUILD_MSTC_VOICE_OPTION_SIPSERVER=y
endif
# Build ZyXEL IVR end

ifneq ($(strip $(BUILD_MSTC_UNREG_INTERNAL_CALL)),)
CMS_DMP_FLAGS += -DMSTC_UNREG_INTERNAL_CALL
export BUILD_MSTC_UNREG_INTERNAL_CALL=y
endif

ifneq ($(strip $(BCM_MAGIC_SYSRQ)),)
export BCM_MAGIC_SYSRQ=y
endif

# MSTC Build fw with different HW start
ifneq ($(strip $(BUILD_MSTC_FW_WITH_DIFFERENT_HW)),)
CMS_DMP_FLAGS += -DBUILD_MSTC_FW_WITH_DIFFERENT_HW
export BUILD_MSTC_FW_WITH_DIFFERENT_HW=y
endif
# MSTC Build fw with different HW end

# TR140 Storage Service

ifneq ($(strip $(BUILD_STORAGESERVICE)),)
CMS_DMP_FLAGS += -DSUPPORT_STORAGESERVICE -DDMP_STORAGESERVICE_1
endif

ifneq ($(strip $(BUILD_NTFS_3G)),)
CMS_DMP_FLAGS += -DSUPPORT_NTFS_3G
endif

ifneq ($(strip $(BUILD_SAMBA)),)
CMS_DMP_FLAGS += -DSUPPORT_SAMBA
CMS_DMP_FLAGS += -DSUPPORT_SAMBA_ACCOUNT
endif

ifneq ($(strip $(BUILD_USB_STORAGE_LED)),)
CMS_DMP_FLAGS += -DENABLE_USB_STORAGE_LED
export ENABLE_USB_STORAGE_LED=y
endif


# end Storage Service


ifneq ($(strip $(BUILD_MCAST_PROXY)),)
   CMS_DMP_FLAGS += -DSUPPORT_IGMP -DDMP_X_BROADCOM_COM_IGMP_1
   ifneq ($(strip $(BUILD_IPV6)),)
      CMS_DMP_FLAGS += -DSUPPORT_MLD -DDMP_X_BROADCOM_COM_MLD_1
   endif
endif

ifneq ($(strip $(BUILD_AUTODETECTION)),)
CMS_DMP_FLAGS += -DSUPPORT_AUTODETECTION -DDMP_X_BROADCOM_COM_AUTODETECTION_1
endif

ifneq ($(strip $(BUILD_OSGI_JVM)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_OSGI_JVM_1 -DDMP_SM_DEPLOYANDEXECUNITS_1
CMS_DMP_FLAGS += -DJVM_MIN_HEAP=$(JVM_MIN_HEAP_SIZE)
CMS_DMP_FLAGS += -DJVM_MAX_HEAP=$(JVM_MAX_HEAP_SIZE)
CMS_DMP_FLAGS += -DJVM_STACK=$(JVM_STACK_SIZE_PER_THREAD)
endif

#
# netfilter modules 
#

ifneq ($(strip $(BRCM_KERNEL_NF_NAT_ALG_IPSEC)),)
	CMS_DMP_FLAGS += -DSUPPORT_IPSEC_PASSTHROUGH
endif

ifneq ($(strip $(BRCM_KERNEL_NF_NAT_ALG_PPTP)),)
	CMS_DMP_FLAGS += -DSUPPORT_PPTP
endif

ifneq ($(strip $(BRCM_KERNEL_NF_NAT_ALG_SIP)),)
	CMS_DMP_FLAGS += -DSUPPORT_SIP
endif

ifneq ($(strip $(BUILD_CONNTRACK_TOOLS)),)
CMS_DMP_FLAGS += -DSUPPORT_CONNTRACK_TOOLS
endif

#
# netfilter modules end
#


# Somehow this VCONFIG is tangled up with the broadcom port mapping and
# VLAN mux features.  Will have to sort it out later.
#
ifneq ($(strip $(BUILD_VCONFIG)),)
CMS_DMP_FLAGS += -DSUPPORT_PORT_MAP -DDMP_BRIDGING_1 
endif

ifneq ($(strip $(BUILD_WANVLANMUX)),)
CMS_DMP_FLAGS += -DSUPPORT_WANVLANMUX
endif

ifneq ($(strip $(BUILD_LANVLAN)),)
CMS_DMP_FLAGS += -DSUPPORT_LANVLAN
endif

ifneq ($(strip $(BRCM_DRIVER_USB)),)
CMS_DMP_FLAGS += -DDMP_USBLAN_1
endif

ifneq ($(strip $(BRCM_TC_RATE_LIMIT)),)
CMS_DMP_FLAGS += -DSUPPORT_RATE_LIMIT
endif

ifneq ($(strip $(BRCM_TC_POLICING)),)
CMS_DMP_FLAGS += -DSUPPORT_POLICING
endif

ifneq ($(strip $(BRCM_KERNEL_FTRACE)),)
CMS_DMP_FLAGS += -DSUPPORT_FTRACE
endif


#
# These variables come from the debug section of make menuconfig
#
ifeq ($(strip $(CMS_LOG_DEBUG)),)
CMS_LOG_FLAGS := -DCMS_LOG0
else
ifneq ($(strip $(CMS_LOG_LEVEL_1)),)
CMS_LOG_FLAGS := -DCMS_LOG2
endif
ifneq ($(strip $(CMS_LOG_LEVEL_2)),)
CMS_LOG_FLAGS := -DCMS_LOG3
endif
ifneq ($(strip $(CMS_STARTUP_DEBUG)),)
CMS_DMP_FLAGS += -DCMS_STARTUP_DEBUG
endif
endif

ifneq ($(strip $(CMS_SECURITY_LOG)),)
CMS_DMP_FLAGS += -DCMS_SECURITY_LOG
endif

ifneq ($(strip $(CMS_MEM_BOUNDARY_CHECK)),)
CMS_DMP_FLAGS += -DCMS_MEM_BOUNDARY_CHECK
endif

ifneq ($(strip $(CMS_MEM_POISON_ALLOC_FREE)),)
CMS_DMP_FLAGS += -DCMS_MEM_POISON_ALLOC_FREE
endif

ifneq ($(strip $(CMS_MEM_LEAK_TRACING)),)
CMS_DMP_FLAGS += -DCMS_MEM_LEAK_TRACING
endif

ifneq ($(strip $(CMS_FATAL_ASSERT)),)
CMS_DMP_FLAGS += -DCMS_FATAL_ASSERT
endif

ifneq ($(strip $(BUILD_DEBUG_TOOLS)),)
CMS_DMP_FLAGS += -DSUPPORT_DEBUG_TOOLS
endif

ifneq ($(strip $(CMS_BYPASS_LOGIN)),)
CMS_DMP_FLAGS += -DCMS_BYPASS_LOGIN
endif

ifneq ($(strip $(BRCM_GMAC)),)
CMS_DMP_FLAGS += -DCMS_BRCM_GMAC
endif

ifneq ($(strip $(BUILD_RPCAPD)),)
ifneq ($(strip $(BUILD_TCPDUMP)),)
CMS_DMP_FLAGS += -DSUPPORT_REMOTE_CAPTURE -DDMP_X_5067F0_MSTC_SNIFFER_1
endif
endif

#
# This needs a little cleanup also.  Instead of explicitly checking for BUILD_CERT,
# this check should be if (BUILD_HTTPD_SSL or BUILD_TR69_SSL or any other feature
# that requires SSL).
#
ifneq ($(strip $(BUILD_CERT)),)
CMS_DMP_FLAGS += -DSUPPORT_CERT -DDMP_X_BROADCOM_COM_DIGITALCERTIFICATES_1
endif

ifneq ($(strip $(BUILD_ZEBRA)),)
CMS_DMP_FLAGS += -DSUPPORT_RIP
endif

ifneq ($(strip $(COMPRESSED_CONFIG_FILE)),)
CMS_DMP_FLAGS += -DCOMPRESSED_CONFIG_FILE
endif

ifneq ($(strip $(BUILD_BACKUP_PSI)),)
CMS_DMP_FLAGS += -DSUPPORT_BACKUP_PSI
endif

ifneq ($(strip $(CMS_CONFIG_COMPAT)),)
CMS_DMP_FLAGS += -DCMS_CONFIG_COMPAT
endif

#__MTS__, TengChang, Log
#start __MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
#Autumn for syslog
ifneq ($(strip $(BRCM_KERNEL_AUXFS_JFFS2)),)
CMS_DMP_FLAGS += -DCONFIG_AUXFS_JFFS2
#__MTS__, TengChang, Support to start syslogd for 963268
CMS_DMP_FLAGS += -DFLASH_FS_SIZE=$(ZYXEL_FLASH_FS_SIZE)
#CMS_DMP_FLAGS += -DFLASH_FS_SIZE=$(ZYXEL_LOGRAM_SIZE)
#end __MTS__, TengChang, Support to start syslogd for 963268
CMS_DMP_FLAGS += -DLOG_ROTATE_NUM=$(ZYXEL_LOG_ROTATE_NUM)
else
CMS_DMP_FLAGS += -DFLASH_FS_SIZE=$(ZYXEL_LOGRAM_SIZE)
CMS_DMP_FLAGS += -DLOG_ROTATE_NUM=$(ZYXEL_LOG_ROTATE_NUM)
endif
#end __MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
#__MTS__, TengChang, Log, end

#we use wlan driver as the flags for wireless support on mdm, http, dal etc 
ifneq ($(strip $(BRCM_DRIVER_WIRELESS)), )
CMS_WLAN_FLAGS += -DBRCM_WLAN -DWIRELESS
#__MTS__, Justin
CMS_DMP_FLAGS += -DDMP_WIFILAN_1 -DDMP_X_BROADCOM_COM_WIFILAN_1 -DFOLLOW_TR098
export WIRELESS=1
ifeq ($(BRCM_WAPI),y)
CMS_WLAN_FLAGS += -DBCMWAPI_WPI -DBCMWAPI_WAI
endif
# Dennis Begin
ifeq ($(MITRASTAR_AUTOGENKEY),y)
CMS_WLAN_FLAGS += -DSUPPORT_AUTOGENKEY
endif
# Dennis end
#KeyYang@MSTC Quqntenna RMT_QCSAPI Porting, 20111215
ifneq ($(strip $(BUILD_MTS_QCS_WAPI)),)
CMS_WLAN_FLAGS += -DRMT_QCSAPI_SUPPORT
CMS_DMP_FLAGS += -DDMP_QCSAPI_WIFILAN_1 
endif
#End of KeyYang's Comment

ifeq ($(BUILD_11ac_throughput_patch_from_412L07),y)
export  BRCM_EXT_SWITCH_TYPE  BUILD_11ac_throughput_patch_from_412L07
CMS_WLAN_FLAGS += -DBUILD_11ac_throughput_patch_from_412L07
CMS_DMP_FLAGS += -DBUILD_11ac_throughput_patch_from_412L07
ifeq ($(BUILD_11ac_throughput_patch_from_412L08),y)
export BUILD_11ac_throughput_patch_from_412L08
CMS_WLAN_FLAGS += -DCONFIG_11ac_throughput_patch_from_412L08
CMS_DMP_FLAGS += -DCONFIG_11ac_throughput_patch_from_412L08
endif
endif

ifeq ($(BUILD_MTS_WPS2_SUPPORTED),y)
CMS_WLAN_FLAGS += -DBUILD_MTS_WPS2_SUPPORTED
endif
endif

ifneq ($(MSTC_CONCURRENT_WIFI_MAX_MBSS_NUM),)
CMS_WLAN_FLAGS += -DMSTC_CONCURRENT_WIFI_MAX_MBSS_NUM=$(MSTC_CONCURRENT_WIFI_MAX_MBSS_NUM)
endif

ifneq ($(strip $(BUILD_MTS_WLAN_BTN_PER)), )
CMS_WLAN_FLAGS += -DMTS_WLAN_BTN_PER
endif

ifneq ($(strip $(BUILD_MTS_WPS_BTN_PER)), )
CMS_WLAN_FLAGS += -DMTS_WPS_BTN_PER
endif

ifneq ($(strip $(WL_ENC_BASE_SERIAL)),)
CMS_DMP_FLAGS += -DDMP_X_0023F8_WL_ENC_BASE_SERIAL
endif

ifneq ($(strip $(WL_ENC_BASE_MAC)),)
CMS_DMP_FLAGS += -DDMP_X_0023F8_WL_ENC_BASE_MAC
endif

ifneq ($(strip $(MSTC_WPS_LED_ACTIVE_OFF)),)
CMS_WLAN_FLAGS += -DMSTC_WPS_LED_ACTIVE_OFF
endif

ifneq ($(strip $(MSTC_WPS_LED_ACTIVE_ON)),)
CMS_WLAN_FLAGS += -DMSTC_WPS_LED_ACTIVE_ON
endif

ifneq ($(strip $(MSTC_WPS_LED_DEFAULT)),)
CMS_WLAN_FLAGS += -DMSTC_WPS_LED_DEFAULT
endif

ifneq ($(strip $(BUILD_MTS_WPS_ERR_LED_SUPPORTED)),)
CMS_WLAN_FLAGS += -DMTS_WPS_ERR_LED_SUPPORTED
endif

ifeq ($(strip $(BRCM_KERNEL_ROOTFS)),nfs)
CMS_DMP_FLAGS += -DCMS_CONFIG_NFS
endif

#KeyYang@MSTC, Support XTMCTL function, 20120413
ifneq ($(strip $(BUILD_XTMCTL)),)
CMS_DMP_FLAGS += -DMTS_XTMCTL_SUPPORTED
endif

#Support MHS LAN Devices data model. __TELEFONICA__, MitraStar, Stan Su, 20110418.
ifneq ($(strip $(BUILD_TELEFONICA_MHS_GUI)),)
CMS_DMP_FLAGS += -DDMP_TELEFONICA_MHS_1
endif

# Support Telefonica Firewall, __TELEFONICA__, MitraStar Chehuai, 20110527
ifneq ($(strip $(BUILD_TELEFONICA_FIREWALL)),)
CMS_DMP_FLAGS += -DDMP_MTS_TELEFONICA_FIREWALL_1 -DMTS_TELEFONICA_FIREWALL
endif

# TELEFONICA customzation
ifneq ($(strip $(BUILD_TELEFONICA)),)
CMS_DMP_FLAGS += -DDMP_TELEFONICA_1
endif
# TELEFONICA customzation

# Yi-Jun@MSTC, Support Stollmann CallMngr+ data model, 20130127
ifneq ($(strip $(BUILD_STOLLMANN_CALLMNGR)),)
CMS_DMP_FLAGS += -DDMP_X_STOLLMANN_COM_CALLMNGR_1
endif

# MSTC TO2 Common Patch
ifneq ($(strip $(BUILD_MSTC_TO2_GERMANY_CUSTOMIZATION)),)
CUSTOM_CFLAGS += -DMSTC_TO2_GERMANY_CUSTOMIZATION -DVODSL_APP_BUILD
CMS_COMPILE_FLAGS += -DMSTC_TO2_GERMANY_CUSTOMIZATION -DVODSL_APP_BUILD
CMS_DMP_FLAGS += -DDMP_X_000000_TO2_GERMANY_1
export BUILD_MSTC_TO2_GERMANY_CUSTOMIZATION
endif

ifneq ($(BUILD_MSTC_TO2_GUI_CACHE_FILE_VERSION),)
export BUILD_MSTC_TO2_GUI_CACHE_FILE_VERSION
endif

# MSTC TO2 TR69 Version
ifneq ($(strip $(BUILD_MSTC_TO2_TR69_VERSION)),)
export BUILD_MSTC_TO2_TR69_VERSION
endif

# MSTC TO2 Support TO2 Hidden GUI
ifneq ($(strip $(BUILD_MSTC_TO2_SUPPORT_HIDDEN_GUI)),)
export BUILD_MSTC_TO2_SUPPORT_HIDDEN_GUI
endif

# MSTC TO2 TR69 REGMAN ACS Server
ifneq ($(strip $(BUILD_MSTC_TO2_TR69_REGMAN_ACS)),)
export BUILD_MSTC_TO2_TR69_REGMAN_ACS
endif

# MSTC TO2 TR69 Fallback Mechanism and HTTP URL Setting
ifneq ($(strip $(BUILD_MSTC_TO2_TR69_FALLBACK)),)
export BUILD_MSTC_TO2_TR69_FALLBACK
endif

CMS_COMPILE_FLAGS := $(DBGFLAGS) $(CMS_LOG_FLAGS) $(PROFILERFLAGS) \
                    -D$(TARGET_OS) $(CMS_COMPILER_OPTS) $(CMS_DMP_FLAGS) \
                    -DCHIP_$(BRCM_CHIP)	-DCONFIG_BCM9$(BRCM_CHIP)

ifneq ($(strip $(BUILD_BRCM_CMS)),)
CMS_COMPILE_FLAGS += -DBRCM_CMS_BUILD
endif

###### Need to export kernel config to userspace as well
ifeq ($(BCM_GPON_802_1Q_ENABLED),y)
CMS_COMPILE_FLAGS += -DCONFIG_BCM_GPON_802_1Q_ENABLED
endif
ifeq ($(BCM_GPON_AE_AUTO_SWITCH),y)
CMS_COMPILE_FLAGS += -DCONFIG_BCM_GPON_AE_AUTO_SWITCH
endif
#start __MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
# __VERIZON__, Autumn
CMS_COMPILE_FLAGS += -DINC_NAND_FLASH_DRIVER=$(INC_NAND_FLASH_DRIVER)

###### Need to export kernel config as CMS is not using ioctl call to get NR_RX_BDS
ifneq ($(strip $(BCM_NR_RX_BDS)),)
CMS_COMPILE_FLAGS += -DCONFIG_BCM_NR_RX_BDS=$(BCM_NR_RX_BDS)
endif
#end __MTS__, RaynorChung: Support 963268 nand flash, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 

ifneq ($(strip $(BRCM_MIPS_RATE_LIMIT)),)
CMS_COMPILE_FLAGS += -DCONFIG_MIPS_RATE_LIMIT=$(BRCM_MIPS_RATE_LIMIT)
endif

CMS_COMPILE_FLAGS += -DCONFIG_EPON_NUM_FE_PORTS=$(EPON_NUM_FE_PORTS)
CMS_COMPILE_FLAGS += -DCONFIG_EPON_NUM_VOIP_PORTS=$(EPON_NUM_VOIP_PORTS)

ifneq ($(strip $(EPON_ONU_TYPE)),)
CMS_COMPILE_FLAGS +=   -D$(EPON_ONU_TYPE)
endif

ifneq ($(strip $(BUILD_EPON_SDK)),)
CMS_COMPILE_FLAGS +=   -DEPON_SDK_BUILD
endif

CFLAGS = $(CMS_COMPILE_FLAGS) $(CUSTOM_CFLAGS) $(ALLOWED_INCLUDE_PATHS) $(CMS_WLAN_FLAGS)
CFLAGS += -I$(TOOLCHAIN)/include -L$(TOOLCHAIN)/lib
CFLAGS += $(BRCM_WERROR_CFLAGS)

# Image Default, __CHT__, MitraStar Curtis, 20111124.
ifneq ($(strip $(ZYXEL_OBM_IMAGE_DEFAULT)),)
CUSTOM_CFLAGS += -DZYXEL_OBM_IMAGE_DEFAULT
endif

# Support BHS GUI, __TELEFONICA__, MitraStar Walter, 20120222.
ifneq ($(strip $(BUILD_TELEFONICA_BHS_GUI)),)
CMS_COMPILE_FLAGS += -DSUPPORT_TELEFONICA_BHS_GUI
endif
# Support MHS GUI, __TELEFONICA__, MitraStar Wespe, 20110328.
ifneq ($(strip $(BUILD_TELEFONICA_MHS_GUI)),)
CMS_COMPILE_FLAGS += -DSUPPORT_TELEFONICA_MHS_GUI
endif

# SUPPORT WEBSSO, __TELEFONICA__, MitraStar Walter, 20120322.
ifneq ($(strip $(BUILD_TELEFONICA_WEBSSO)),)
CMS_COMPILE_FLAGS += -DSUPPORT_TELEFONICA_WEBSSO
endif

# SUPPORT WEB LOGOUT, __TELEFONICA__, MitraStar Walter, 20120911.
ifneq ($(strip $(BUILD_TELEFONICA_WEB_LOGOUT)),)
CMS_COMPILE_FLAGS += -DSUPPORT_TELEFONICA_WEB_LOGOUT
endif
# SUPPORT TELEFONICA BRAZIL STYLE, __TELEFONICA__, MitraStar Walter, 20120718.
ifneq ($(strip $(BUILD_TELEFONICA_BRAZIL_STYLE)),)
CMS_COMPILE_FLAGS += -DSUPPORT_TELEFONICA_BRAZIL_STYLE
endif

# TELEFONICA customzation
ifneq ($(strip $(BUILD_TELEFONICA)),)
CMS_COMPILE_FLAGS += -DSUPPORT_TELEFONICA
CMS_COMPILE_FLAGS += -DMTS_Telefonica_CLI
CMS_COMPILE_FLAGS += -DMTS_Telefonica_TR69
CMS_COMPILE_FLAGS += -DMTS_Telefonica_IAPD
export SUPPORT_TELEFONICA=y
endif

ifneq ($(strip $(MSTC_TELEFONICA_IAD)),)
CMS_COMPILE_FLAGS += -DMSTC_TELEFONICA_IAD
endif
# TELEFONICA customzation

#__MSTC__, JhihPing, MTS remote mgmt
ifneq ($(strip $(BUILD_MSTC_ACCESSSERVICE)),)
CUSTOM_CFLAGS += -DMSTC_ACCESSSERVICE -DDMP_X_5067F0_MSTC_ACCESSSERVICE_1
endif

#__MSTC__, David, MTS FTTH GUI main.html
ifneq ($(strip $(BUILD_MSTC_LOGIN_PRIVILEGE)),)
CUSTOM_CFLAGS += -DMSTC_LOGIN_PRIVILEGE
endif

#__MSTC__, TengChang, for ProFTPD with SFTP
ifneq ($(strip $(BUILD_MSTC_SFTP_SCP)),)
CUSTOM_CFLAGS += -DMSTC_SFTP_SCP
endif

#__MSTC__, JhihShan, for Brazil default setting
ifneq ($(strip $(BUILD_BRAZIL_DEFAULT_SETTING)),)
CMS_COMPILE_FLAGS += -DBRAZIL_DEFAULT_SETTING
CUSTOM_CFLAGS += -DBRAZIL_DEFAULT_SETTING
CMS_DMP_FLAGS += -DBRAZIL_DEFAULT_SETTING
export BUILD_BRAZIL_DEFAULT_SETTING
endif

#__MSTC__, KeyYang, for Spain default setting
ifneq ($(strip $(BUILD_SPAIN_DEFAULT_SETTING)),)
CMS_COMPILE_FLAGS += -DSPAIN_DEFAULT_SETTING
CUSTOM_CFLAGS += -DSPAIN_DEFAULT_SETTING
CMS_DMP_FLAGS += -DSPAIN_DEFAULT_SETTING
export BUILD_SPAIN_DEFAULT_SETTING
endif

#__MSTC__, CLK, for Chile default setting
ifneq ($(strip $(BUILD_CHILE_DEFAULT_SETTING)),)
CMS_COMPILE_FLAGS += -DCHILE_DEFAULT_SETTING
CUSTOM_CFLAGS += -DCHILE_DEFAULT_SETTING
CMS_DMP_FLAGS += -DCHILE_DEFAULT_SETTING
export BUILD_CHILE_DEFAULT_SETTING
endif

#MSTC NAND Flash support 
ifneq ($(strip $(BUILD_MTS_NAND_FLASH_SUPPORT)),)
CMS_COMPILE_FLAGS += -DMTS_NAND_FLASH_SUPPORT
export BUILD_MTS_NAND_FLASH_SUPPORT
endif

#MSTC support restore to default 
ifneq ($(strip $(BUILD_MTS_RESTORE_TO_DEFAULT)),)
CMS_COMPILE_FLAGS += -DMTS_RESTORE_TO_DEFAULT
endif

#MSTC support restore to default 
ifneq ($(strip $(BUILD_MTS_LED_CONTROL)),)
CMS_COMPILE_FLAGS += -DMTS_LED_CONTROL
endif

#MSTC support test commands 
ifneq ($(strip $(BUILD_MTS_8021AG_SUPPORT)),)
CMS_COMPILE_FLAGS += -DMTS_8021AG_SUPPORT
endif

#MSTC support test commands 
ifneq ($(strip $(BUILD_MTS_TEST_COMMAND_SUPPORT)),)
CMS_COMPILE_FLAGS += -DMTS_TEST_COMMAND_SUPPORT
endif

#MSTC support QoS 
ifneq ($(strip $(BUILD_MTS_QoS)),)
CMS_COMPILE_FLAGS += -DBUILD_MTS_QoS
export BUILD_MTS_QoS
endif

#MSTC support Ipv6 only
ifneq ($(strip $(BUILD_MTS_IPV6)),)
CMS_COMPILE_FLAGS += -DINET6_MTS
export BUILD_MTS_IPV6
endif

#__MSTC__, JhihPing, MTS trust domain
ifneq ($(strip $(BUILD_MSTC_TRUSTDOMAIN)),)
CUSTOM_CFLAGS += -DMSTC_TRUSTDOMAIN -DDMP_X_5067F0_TRUSTDOMAIN_1
endif

# MTSC supports blocking wan port scan 
ifneq ($(strip $(BUILD_MSTC_WAN_PORT_SCAN)),)
CUSTOM_CFLAGS += -DMSTC_WAN_PORT_SCAN
endif

# MSTC support firmware upgrade from flash
ifneq ($(strip $(BUILD_MSTC_FWUP_FROM_FLASH)),)
CUSTOM_CFLAGS += -DMSTC_FWUP_FROM_FLASH
endif

# MSTC configure 4 EPHY or 1 GPHY
ifneq ($(strip $(BUILD_GPHY)),)
CUSTOM_CFLAGS += -DMSTC_ENABLE_GHPY
export BUILD_GPHY=y
endif

# MSTC , Andylin,  prevent lan side packet send to wan side before NAT rule inserted
ifneq ($(strip $(BUILD_PREVENT_LANTOWAN_B_NAT)),)
CMS_COMPILE_FLAGS += -DMSTC_TELEFONICA_PREVENT_LANTOWAN_PACKET_B_NAT
endif

# MSTC Downstream QoS support
ifneq ($(strip $(BUILD_CLASS_DOWNSTREAM_8021Q)),)
CUSTOM_CFLAGS += -DMTS_CLASS_DOWNSTREAM_8021Q
export BUILD_CLASS_DOWNSTREAM_8021Q
endif

# MSTC VC Auto Hunt support
ifneq ($(strip $(BUILD_MTS_VCAUTOHUNT)),)
CUSTOM_CFLAGS += -DMTS_VCAUTOHUNT
export BUILD_MTS_VCAUTOHUNT
endif

# Support User Config ULA
ifneq ($(strip $(BUILD_USER_CONF_ULA)),)
CUSTOM_CFLAGS += -DSUPPORT_USER_CONFIG_ULA
endif

# MSTC support hardware watchdog
ifneq ($(strip $(MSTC_WDT)),)
export MSTC_WDT=y
endif

# MSTC Common Patch from Telefonica_412L02
ifneq ($(strip $(BUILD_MSTC_COMMON_PATCH)),)
CUSTOM_CFLAGS += -DMSTC_COMMON_PATCH
CMS_COMPILE_FLAGS += -DMSTC_COMMON_PATCH 
export BUILD_MSTC_COMMON_PATCH
endif

#MSTC
ifneq ($(strip $(BUILD_MSTC_RECORD_CALL_TRACE)),)
export MSTC_RECORD_CALL_TRACE=y
endif

#MSTC
ifneq ($(strip $(BUILD_MSTC_RECORD_CALL_TRACE_PATH_1)),)
export MSTC_RECORD_CALL_TRACE_PATH_1=y
endif

#MSTC
ifneq ($(strip $(BUILD_MSTC_RECORD_CALL_TRACE_PATH_2)),)
export MSTC_RECORD_CALL_TRACE_PATH_2=y
endif

#MSTC
ifneq ($(strip $(BUILD_MSTC_OOPS_FILE_NUM)),)
export MSTC_OOPS_FILE_NUM=$(BUILD_MSTC_OOPS_FILE_NUM)
endif

#MSTC
ifneq ($(strip $(BUILD_MSTC_DEC_AND_GZIP_CORE)),)
export MSTC_DEC_AND_GZIP_CORE=y
endif

#MSTC
ifneq ($(strip $(BUILD_MSTC_ZLIB)),)
export MSTC_ZLIB=y
endif

#MSTC
ifneq ($(strip $(BUILD_MSTC_COREDUMP_FOLDER_PATH_1)),)
export MSTC_COREDUMP_FOLDER_PATH_1=y
endif

#MSTC
ifneq ($(strip $(BUILD_MSTC_COREDUMP_FOLDER_PATH_2)),)
export MSTC_COREDUMP_FOLDER_PATH_2=y
endif

#MSTC
ifneq ($(strip $(BUILD_MSTC_CORE_SIZE_PRE_THRESHOLD)),)
export MSTC_CORE_SIZE_PRE_THRESHOLD=$(BUILD_MSTC_CORE_SIZE_PRE_THRESHOLD)
endif

#MSTC
ifneq ($(strip $(BUILD_MSTC_CORE_SIZE_POST_THRESHOLD)),)
export MSTC_CORE_SIZE_POST_THRESHOLD=$(BUILD_MSTC_CORE_SIZE_POST_THRESHOLD)
endif

# Build MSTC_VOIP_ZYIMS
ifneq ($(strip $(BUILD_MSTC_VOIP_ZYIMS)),)
CUSTOM_CFLAGS += -DMSTC_VOIP_ZYIMS
CMS_COMPILE_FLAGS += -DMSTC_VOIP_ZYIMS
export BUILD_MSTC_VOIP_ZYIMS
endif

# Build STOLLMANN_CALLMNGR
ifneq ($(strip $(BUILD_STOLLMANN_CALLMNGR)),)
CALLMNGR_CFLAGS := -DSTOLLMANN_CALLMNGR -DCALLMNGR_VERSION=\"$(CALLMNGR_VERSION)\"
CMS_COMPILE_FLAGS += $(CALLMNGR_CFLAGS)
CUSTOM_CFLAGS += $(CALLMNGR_CFLAGS)
# For other flag source, please add flag define here...
ifneq ($(strip $(BUILD_STOLLMANN_CALLMNGR)),)
CALLMNGR_CFLAGS += -DMSTC_TO2_GERMANY_CUSTOMIZATION
endif

# For CallMngr+/BSPAL default debug level settings
ifneq ($(CALLMNGR_BSPAL_LOGLEVEL_OVERWRITE),)
  CALLMNGR_CFLAGS += -DCALLMNGR_BSPAL_LOGLEVEL_OVERWRITE
  ifneq ($(CALLMNGR_BSPAL_LOGLEVEL_DEFAULT),)
    CALLMNGR_CFLAGS += -DLOGLEVEL_CALLMNGR=\"warning\" -DLOGLEVEL_BSPAL=0
  endif
  ifneq ($(CALLMNGR_BSPAL_LOGLEVEL_CRITICAL),)
    CALLMNGR_CFLAGS += -DLOGLEVEL_CALLMNGR=\"crit\" -DLOGLEVEL_BSPAL=0
  endif
  ifneq ($(CALLMNGR_BSPAL_LOGLEVEL_ERROR),)
    CALLMNGR_CFLAGS += -DLOGLEVEL_CALLMNGR=\"error\" -DLOGLEVEL_BSPAL=1
  endif
  ifneq ($(CALLMNGR_BSPAL_LOGLEVEL_WARNING),)
    CALLMNGR_CFLAGS += -DLOGLEVEL_CALLMNGR=\"warning\" -DLOGLEVEL_BSPAL=2
  endif
  ifneq ($(CALLMNGR_BSPAL_LOGLEVEL_INFO),)
    CALLMNGR_CFLAGS += -DLOGLEVEL_CALLMNGR=\"info\" -DLOGLEVEL_BSPAL=3
  endif
  ifneq ($(CALLMNGR_BSPAL_LOGLEVEL_DEBUG),)
    CALLMNGR_CFLAGS += -DLOGLEVEL_CALLMNGR=\"debug\" -DLOGLEVEL_BSPAL=4
  endif
endif
export BUILD_STOLLMANN_CALLMNGR CALLMNGR_VERSION CALLMNGR_CFLAGS
endif

# Build DSPG CMBS C-API share library feature...
ifneq ($(strip $(BUILD_MSTC_DSPG_CMBS_API_SHARE_LIB)),)
# Also build DSPG cmbs_tcx application...
ifneq ($(strip $(BUILD_MSTC_DSPG_CMBS_TCX_APP)),)
export BUILD_MSTC_DSPG_CMBS_TCX_APP
endif
export BUILD_MSTC_DSPG_CMBS_API_SHARE_LIB
endif

# Build phonetest...
ifneq ($(strip $(BUILD_PHONETEST)),)
export BUILD_PHONETEST
endif

# Prepare multi-condition for making the vodsl application decision 
ifneq ($(strip $(BUILD_VODSL)),)
VODSL_TARGET_BUILD=y
# Disable vodsl if we build ZyIMS
ifneq ($(strip $(BUILD_MSTC_VOIP_ZYIMS)),)
VODSL_TARGET_BUILD=
endif
# Disable vodsl if we build stollmann CallMngr+
ifneq ($(strip $(BUILD_STOLLMANN_CALLMNGR)),)
VODSL_TARGET_BUILD=
endif
else
# BUILD_VODSL option disabled
VODSL_TARGET_BUILD=

# export the result as the VODSL_APP_BUILD Flag for code level
ifneq ($(strip $(VODSL_TARGET_BUILD)),)
CUSTOM_CFLAGS += -DVODSL_APP_BUILD
CMS_COMPILE_FLAGS += -DVODSL_APP_BUILD
export VODSL_TARGET_BUILD
endif
endif

# MSTC Telefonica Common Patch from Telefonica_412L02
ifneq ($(strip $(BUILD_MSTC_TELEFONICA_CUSTOMIZATION)),)
CUSTOM_CFLAGS += -DMSTC_TELEFONICA_CUSTOMIZATION
CMS_COMPILE_FLAGS += -DMSTC_TELEFONICA_CUSTOMIZATION
export BUILD_MSTC_TELEFONICA_CUSTOMIZATION
endif

# MSTC Rip to update Conntrack , Andylin
ifneq ($(strip $(BUILD_MSTC_RIP2UPDATE_CONNTRACK)),)
export BUILD_MSTC_RIP2UPDATE_CONNTRACK
endif

#Support RFC6092
ifneq ($(strip $(BUILD_MSTC_SUPPORT_RFC6092)),)
CMS_COMPILE_FLAGS += -DMSTC_SUPPORT_RFC6092
export BUILD_MSTC_SUPPORT_RFC6092
endif

#__MSTC__, Marcus 
ifneq ($(strip $(BUILD_MSTC_VOIP_AUTO_TEST)),)
CMS_COMPILE_FLAGS += -DMSTC_VOIP_AUTO_TEST
endif


export CMS_COMPILE_FLAGS


###########################################
#
# Generic/common rules which are used by lower layer Makefiles
#
###########################################


# Every target should have a dependency on this target to make sure
# the user has specified a profile.
profile_defined_check: 
	@if [ "$(PROFILE)" = "" ]; then \
          echo You need to specify build profile name from $(TARGETS_DIR) using 'make PROFILE=<profile name>...'; exit 1; \
	fi

# See LAST_PROFILE at the top of this file.
profile_changed_check: profile_defined_check
ifneq ($(strip $(IGNORE_LAST_PROFILE)),1)
	@if [ "$(LAST_PROFILE)" = "" ]; then \
		echo "$(PROFILE)" > $(LAST_PROFILE_COOKIE); \
	else \
		if [ "$(LAST_PROFILE)" != "$(PROFILE)" ]; then \
			echo "The specified profile, $(PROFILE), differs from the last one built, $(LAST_PROFILE)."; \
			echo "The entire image must be rebuilt from the top of CommEngine."; \
			echo "To skip this check, build with IGNORE_LAST_PROFILE=1."; \
			read -p "Press ENTER to rebuild the entire image or CTRL-C to abort. " resp; \
			$(MAKE) PROFILE=$(LAST_PROFILE) clean; \
			$(MAKE) PROFILE=$(PROFILE); \
			echo "Ignore the make exit error, Error 1"; \
			exit 1; \
		fi \
	fi
else
	@if [ "$(LAST_PROFILE)" = "" ]; then \
		echo "$(PROFILE)" > $(LAST_PROFILE_COOKIE); \
	fi
endif


prebuild_checks: make_version_check kernel_version_check
	@echo "shell is $(SHELL).  Bash version is $(shell echo $$BASH_VERSION)"
	@if [ -z "$(shell echo $$BASH_VERSION)" ]; then \
		echo "***************************************************"; \
		echo "ERROR: $(SHELL) does not invoke bash shell"; \
		echo "***************************************************"; \
		exit 1; \
	fi


#
# MAKE_VERSION is an internally defined symbol from make
#
REQUIRED_MAKE_VERSION := 3.81
MAJOR_RMV := $(word 1,$(subst ., ,$(REQUIRED_MAKE_VERSION)))
MINOR_RMV := $(word 2,$(subst ., ,$(REQUIRED_MAKE_VERSION)))
MAJOR_MV := $(word 1,$(subst ., ,$(MAKE_VERSION)))
MINOR_MV := $(word 2,$(subst ., ,$(MAKE_VERSION)))

make_version_check:
	@echo "make version is $(MAKE_VERSION)"
	@if [ $(MAJOR_MV) -lt $(MAJOR_RMV) -o $(MAJOR_MV) -eq $(MAJOR_RMV) -a $(MINOR_MV) -lt $(MINOR_RMV) ]; then \
	  echo "******************************************************"; \
	  echo "ERROR: You must use GNU Make $(REQUIRED_MAKE_VERSION) to build the image!!"; \
	  echo "******************************************************"; \
	  exit 1; \
	fi


REQUIRED_KERNEL_VERSION := 2.6
KERNEL_VERSION := $(shell uname -r)
MAJOR_RKV := $(word 1,$(subst ., ,$(REQUIRED_KERNEL_VERSION)))
MINOR_RKV := $(word 2,$(subst ., ,$(REQUIRED_KERNEL_VERSION)))
MAJOR_KV := $(word 1,$(subst ., ,$(KERNEL_VERSION)))
MINOR_KV := $(word 2,$(subst ., ,$(KERNEL_VERSION)))

kernel_version_check:
	@echo "kernel version is $(KERNEL_VERSION)"
	@if [ $(MAJOR_KV) -lt $(MAJOR_RKV) -o $(MAJOR_KV) -eq $(MAJOR_RKV) -a $(MINOR_KV) -lt $(MINOR_RKV) ]; then \
	  echo "******************************************************"; \
	  echo "ERROR: You must use a relatively recent Linux distribution"; \
	  echo "ERROR: with a $(REQUIRED_KERNEL_VERSION) kernel to build the image!!"; \
	  echo "******************************************************"; \
	  exit 1; \
	fi


$(PROFILE_DIR)/vmlinux: $(PROFILE_DIR)/$(PROFILE)
ifneq ($(strip $(DONT_CLEAN)),1)
	@if [ -e $(PROFILE_DIR)/vmlinux ]; then \
	  echo "The specified profile, $(PROFILE), has been modified since the last build."; \
	  echo "The entire image must be rebuilt from the top of CommEngine."; \
	  echo "To skip this check, build with DONT_CLEAN=1."; \
	  read -p "Press ENTER to rebuild the entire image or CTRL-C to abort. " resp; \
	  rm $(PROFILE_DIR)/vmlinux; \
	  $(MAKE) PROFILE=$(PROFILE) clean; \
	  $(MAKE) PROFILE=$(PROFILE); \
	  echo "Ignore the make exit error, Error 1"; \
	  exit 1; \
	fi
endif


sanity_check: profile_changed_check


profile_saved_check: $(PROFILE_DIR)/vmlinux


$(LAST_PROFILE_COOKIE): sanity_check


$(OBJS) : $(LAST_PROFILE_COOKIE)


generic_oaldir:
	$(MAKE) -C $(OALDIR)

oal.a: $(OBJS)
	$(AR) -rcs $@ $(OBJS)

generic_exe_install: $(EXE)
	mkdir -p $(INSTALL_DIR)/bin
	install -m 755 $(EXE) $(INSTALL_DIR)/bin

generic_public_lib_install: $(LIB)
	mkdir -p $(INSTALL_DIR)/lib/public
	install -m 755 $(LIB) $(INSTALL_DIR)/lib/public

generic_private_lib_install: $(LIB)
	mkdir -p $(INSTALL_DIR)/lib/private
	install -m 755 $(LIB) $(INSTALL_DIR)/lib/private

generic_clean:
	rm -f *.o *.d *.d.* core.* *.a output.txt $(EXE) $(LIB)
	rm -rf output

generic_oalclean:
	$(MAKE) -C $(OALDIR) clean

# See example in GNU Make, 4.6
generic_subdir_clean:
	for dir in $(SUBDIRS); do \
		if [ -d $$dir ] ; then \
			if [ -f $$dir/Makefile ] ; then \
		$(MAKE) -C $$dir clean; \
			fi \
		fi \
	done


# find any modular subdirs in the directory.
# strip out the ./bcmpkg part, leaving only the directory name.
subdir_list := $(shell ls */.bcmpkg 2> /dev/null)
MODULAR_SUBDIRS := $(subst /.bcmpkg,,$(subdir_list))


# find any modular object files in the directory.
# change .c.bcmpkg to .o
obj_list := $(subst .c.bcmpkg,.o,$(shell ls .*.bcmpkg 2> /dev/null))
MODULAR_OBJS := $(patsubst .%,%,$(obj_list))

# this rule makes the individual makefiles cleaner, but at the cost
# of single threading the makes to one directory at a time.
generic_subdir_make_default:
	for dir in $(SUBDIRS); do \
		$(MAKE) -C $$dir; \
	done


# these are the generic rules dealing with modular software
include $(BUILD_DIR)/make.modsw


#
# Some debug targets, to dump out various variables
#
show_build_vars:
	@echo "BUILD_DIR=$(BUILD_DIR)"
	@echo "KERNEL_VER=$(KERNEL_VER)"
	@echo "TARGETS_DIR=$(TARGETS_DIR)"
	@echo "PROFILE=$(PROFILE)"
	
show_subdirs:
	@echo HARDCODED_SUBDIRS=$(HARDCODED_SUBDIRS)
	@echo AUTODETECT_SUBDIRS=$(AUTODETECT_SUBDIRS)
	@echo MODSW_SUBDIRS=$(MODSW_SUBDIRS)
	@echo SUBDIRS=$(SUBDIRS)
	
show_contrib_libs:
	@echo MODSW_CONTRIB_LIBS=$(MODSW_CONTRIB_LIBS)
	@echo MODSW_CONTRIB_LIBS_DIRS=$(MODSW_CONTRIB_LIBS_DIRS)


